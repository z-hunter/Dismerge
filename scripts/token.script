-- Подключаем модуль эволюционных таблиц
local evolution_tables = require("scripts.evolution_tables")

go.property("level", 1)
go.property("grid_x", 1)
go.property("grid_y", 1)

-- Скорость движения
local move_speed = 2500  -- пикселей в секунду

-- Функция для обновления визуального отображения уровня
local function update_level_visual(self)
	-- Устанавливаем текст
	local text = tostring(self.level)
	label.set_text("#label", text)
	
	-- Получаем цвет для эволюционной цепочки
	local color = evolution_tables.get_chain_color(self.evo_id)
	go.set("#label", "color", color)
	
	-- Изменяем масштаб в зависимости от уровня
	local scale = vmath.vector3(0.8 + self.level * 0.1, 0.8 + self.level * 0.1, 1.0)
	go.set("#label", "scale", scale)
end

function init(self)
	self.level = self.level
	self.grid_x = self.grid_x
	self.grid_y = self.grid_y
	
	-- evo_id будет установлен через сообщение set_evo_id
	-- Пока что устанавливаем временное значение
	if not self.evo_id or self.evo_id == "" then
		self.evo_id = "TLS"  -- Временное значение
	end
	
	print("TOKEN: Initialized token at grid(" .. self.grid_x .. ", " .. self.grid_y .. ")")
	
	-- Визуальное отображение будет обновлено после получения set_evo_id сообщения
end

function update(self, dt)
	-- НОВАЯ СИСТЕМА: Простая анимация движения
	if self.move_target then
		local current_pos = go.get_position(".")
		local direction = self.move_target - current_pos
		local distance = vmath.length(direction)
		
		if distance > 1 then
			-- Продолжаем движение
			local movement = vmath.normalize(direction) * move_speed * dt
			if vmath.length(movement) > distance then
				movement = direction
			end
			go.set_position(current_pos + movement, ".")
		else
			-- Достигли цели
			go.set_position(self.move_target, ".")
			self.move_target = nil
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_drag") then
		-- НОВАЯ СИСТЕМА: Начало перетаскивания
		print("TOKEN: Received start_drag at grid(" .. self.grid_x .. ", " .. self.grid_y .. ") evo_id=" .. tostring(self.evo_id) .. " level=" .. tostring(self.level))
		self.is_dragging = true
		-- Визуальные эффекты для перетаскивания
		go.set_scale(vmath.vector3(1.2, 1.2, 1.0), ".")
		go.set("#label", "color", vmath.vector4(1, 1, 1, 0.8))

		
	elseif message_id == hash("stop_drag") then
		-- НОВАЯ СИСТЕМА: Окончание перетаскивания
		print("TOKEN: Received stop_drag at grid(" .. self.grid_x .. ", " .. self.grid_y .. ") evo_id=" .. tostring(self.evo_id) .. " level=" .. tostring(self.level))
		self.is_dragging = false
		-- Возвращаем нормальный размер и цвет
		go.set_scale(vmath.vector3(1.0, 1.0, 1.0), ".")
		update_level_visual(self)
		
	elseif message_id == hash("set_position") then
		-- НОВАЯ СИСТЕМА: Принудительная установка позиции (для следования за курсором)
		go.set_position(message.position, ".")
		if message.position and message.position.z and message.position.z > 0 then
			print("DEBUG: TOKEN SET_POSITION Z = " .. tostring(message.position.z) .. " at pos (" .. tostring(message.position.x) .. ", " .. tostring(message.position.y) .. ")")
		end
		
	elseif message_id == hash("move_to") then
		-- НОВАЯ СИСТЕМА: Плавное движение к цели
		if message.smooth then
			self.move_target = message.position
		else
			go.set_position(message.position, ".")
		end
		
	elseif message_id == hash("set_grid_position") then
		-- Обновляем координаты сетки
		self.grid_x = message.grid_x
		self.grid_y = message.grid_y
		
	elseif message_id == hash("update_level") then
		-- Обновляем уровень и визуал
		self.level = message.level
		update_level_visual(self)
		
	elseif message_id == hash("update_evo_id") then
		-- Обновляем ID эволюционной цепочки и визуал
		self.evo_id = message.evo_id
		update_level_visual(self)
		
	elseif message_id == hash("set_evo_id") then
		-- Устанавливаем ID эволюционной цепочки при инициализации
		self.evo_id = message.evo_id
		update_level_visual(self)
		
	elseif message_id == hash("get_token_info") then
		-- Возвращаем информацию о фишке
		local chain = evolution_tables.get_evolution_chain(self.evo_id)
		local item_name = evolution_tables.get_item_name(self.evo_id, self.level)
		
		local info = {
			evo_id = self.evo_id,
			level = self.level,
			chain_name = chain and chain.name or "Unknown",
			item_name = item_name or "Unknown",
			grid_x = self.grid_x,
			grid_y = self.grid_y
		}
		
		msg.post(sender, "token_info", info)
		

	end
end 